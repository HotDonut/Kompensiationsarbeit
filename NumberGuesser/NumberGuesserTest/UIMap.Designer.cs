// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 16.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace NumberGuesserTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public partial class UIMap
    {
        
        /// <summary>
        /// CheckUpperBound - Use 'CheckUpperBoundParams' to pass parameters into this method.
        /// </summary>
        public void CheckUpperBound()
        {
            #region Variable Declarations
            WpfEdit uIGuessedNumberEdit = this.UIMainWindowWindow.UIGuessedNumberEdit;
            WpfButton uIGuessButton = this.UIMainWindowWindow.UIGuessButton;
            #endregion

            // Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.CheckUpperBoundParams.UIMainWindowWindowExePath, this.CheckUpperBoundParams.UIMainWindowWindowAlternateExePath);

            // Type '101' in 'guessedNumber' text box
            uIGuessedNumberEdit.Text = this.CheckUpperBoundParams.UIGuessedNumberEditText;

            // Click 'Guess' button
            Mouse.Click(uIGuessButton, new Point(27, 8));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfText uIYourguessednumberistText = this.UIMainWindowWindow.UIYourguessednumberistText;
            #endregion

            // Verify that the 'Name' property of 'Your guessed number is too high!' label equals 'Your guessed number is too high!'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIYourguessednumberistTextName, uIYourguessednumberistText.Name);
        }
        
        /// <summary>
        /// CheckLowerBound - Use 'CheckLowerBoundParams' to pass parameters into this method.
        /// </summary>
        public void CheckLowerBound()
        {
            #region Variable Declarations
            WpfButton uIGuessButton = this.UIMainWindowWindow.UIGuessButton;
            #endregion

            // Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.CheckLowerBoundParams.UIMainWindowWindowExePath, this.CheckLowerBoundParams.UIMainWindowWindowAlternateExePath);

            // Click 'Guess' button
            Mouse.Click(uIGuessButton, new Point(19, 6));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WpfText uIYourguessednumberistText1 = this.UIMainWindowWindow.UIYourguessednumberistText1;
            #endregion

            // Verify that the 'Name' property of 'Your guessed number is too low!' label equals 'Your guessed number is too low!'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIYourguessednumberistText1Name, uIYourguessednumberistText1.Name);
        }
        
        /// <summary>
        /// ClickAllElements - Use 'ClickAllElementsParams' to pass parameters into this method.
        /// </summary>
        public void ClickAllElements()
        {
            #region Variable Declarations
            WpfEdit uIGuessedNumberEdit = this.UIMainWindowWindow.UIGuessedNumberEdit;
            WpfButton uIGuessButton = this.UIMainWindowWindow.UIGuessButton;
            WpfButton uINewGameButton = this.UIMainWindowWindow.UINewGameButton;
            WinWindow uIMainWindowWindow1 = this.UIMainWindowWindow1;
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow1.UIMainWindowTitleBar;
            WinButton uICloseButton = this.UIMainWindowWindow1.UICloseButton;
            #endregion

            // Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.ClickAllElementsParams.UIMainWindowWindowExePath, this.ClickAllElementsParams.UIMainWindowWindowAlternateExePath);

            // Type '3000000' in 'guessedNumber' text box
            uIGuessedNumberEdit.Text = this.ClickAllElementsParams.UIGuessedNumberEditText;

            // Click 'Guess' button
            Mouse.Click(uIGuessButton, new Point(33, 10));

            // Click 'New Game' button
            Mouse.Click(uINewGameButton, new Point(27, 14));

            // Click 'New Game' button
            Mouse.Click(uINewGameButton, new Point(27, 14));

            // Click 'New Game' button
            Mouse.Click(uINewGameButton, new Point(27, 14));

            // Click 'Guess' button
            Mouse.Click(uIGuessButton, new Point(25, 10));

            // Maximize window 'MainWindow'
            uIMainWindowWindow1.Maximized = this.ClickAllElementsParams.UIMainWindowWindow1Maximized;

            // Click 'MainWindow' title bar
            Mouse.Click(uIMainWindowTitleBar, new Point(1783, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 0));
        }
        
        /// <summary>
        /// CheckWinMessageDefault - Use 'CheckWinMessageDefaultParams' to pass parameters into this method.
        /// </summary>
        public void CheckWinMessageDefault()
        {
            #region Variable Declarations
            WpfEdit uIGuessedNumberEdit = this.UIMainWindowWindow.UIGuessedNumberEdit;
            WpfButton uIGuessButton = this.UIMainWindowWindow.UIGuessButton;
            #endregion

            // Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.CheckWinMessageDefaultParams.UIMainWindowWindowExePath, this.CheckWinMessageDefaultParams.UIMainWindowWindowAlternateExePath);

            // Type '42' in 'guessedNumber' text box
            uIGuessedNumberEdit.Text = this.CheckWinMessageDefaultParams.UIGuessedNumberEditText;

            // Click 'Guess' button
            Mouse.Click(uIGuessButton, new Point(40, 6));
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WpfText uIYourguessiscorrectClText = this.UIMainWindowWindow.UIYourguessiscorrectClText;
            #endregion

            // Verify that the 'Name' property of 'Your guess is correct! Click 'New Game' for the ne...' label equals 'Your guess is correct!
            //Click 'New Game' for the next round.'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIYourguessiscorrectClTextName, uIYourguessiscorrectClText.Name);
        }
        
        /// <summary>
        /// CheckNewGameMessage - Use 'CheckNewGameMessageParams' to pass parameters into this method.
        /// </summary>
        public void CheckNewGameMessage()
        {
            #region Variable Declarations
            WpfButton uINewGameButton = this.UIMainWindowWindow.UINewGameButton;
            #endregion

            // Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.CheckNewGameMessageParams.UIMainWindowWindowExePath, this.CheckNewGameMessageParams.UIMainWindowWindowAlternateExePath);

            // Click 'New Game' button
            Mouse.Click(uINewGameButton, new Point(36, 10));
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WpfText uIMakeaguesstogetnewinText = this.UIMainWindowWindow.UIMakeaguesstogetnewinText;
            #endregion

            // Verify that the 'Name' property of 'Make a guess to get new information!' label equals 'Make a guess to get new information!'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIMakeaguesstogetnewinTextName, uIMakeaguesstogetnewinText.Name);
        }
        
        #region Properties
        public virtual CheckUpperBoundParams CheckUpperBoundParams
        {
            get
            {
                if ((this.mCheckUpperBoundParams == null))
                {
                    this.mCheckUpperBoundParams = new CheckUpperBoundParams();
                }
                return this.mCheckUpperBoundParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual CheckLowerBoundParams CheckLowerBoundParams
        {
            get
            {
                if ((this.mCheckLowerBoundParams == null))
                {
                    this.mCheckLowerBoundParams = new CheckLowerBoundParams();
                }
                return this.mCheckLowerBoundParams;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual ClickAllElementsParams ClickAllElementsParams
        {
            get
            {
                if ((this.mClickAllElementsParams == null))
                {
                    this.mClickAllElementsParams = new ClickAllElementsParams();
                }
                return this.mClickAllElementsParams;
            }
        }
        
        public virtual CheckWinMessageDefaultParams CheckWinMessageDefaultParams
        {
            get
            {
                if ((this.mCheckWinMessageDefaultParams == null))
                {
                    this.mCheckWinMessageDefaultParams = new CheckWinMessageDefaultParams();
                }
                return this.mCheckWinMessageDefaultParams;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual CheckNewGameMessageParams CheckNewGameMessageParams
        {
            get
            {
                if ((this.mCheckNewGameMessageParams == null))
                {
                    this.mCheckNewGameMessageParams = new CheckNewGameMessageParams();
                }
                return this.mCheckNewGameMessageParams;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private CheckUpperBoundParams mCheckUpperBoundParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private CheckLowerBoundParams mCheckLowerBoundParams;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private ClickAllElementsParams mClickAllElementsParams;
        
        private CheckWinMessageDefaultParams mCheckWinMessageDefaultParams;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private CheckNewGameMessageParams mCheckNewGameMessageParams;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUpperBound'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class CheckUpperBoundParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        
        /// <summary>
        /// Type '101' in 'guessedNumber' text box
        /// </summary>
        public string UIGuessedNumberEditText = "101";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Your guessed number is too high!' label equals 'Your guessed number is too high!'
        /// </summary>
        public string UIYourguessednumberistTextName = "Your guessed number is too high!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLowerBound'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class CheckLowerBoundParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Your guessed number is too low!' label equals 'Your guessed number is too low!'
        /// </summary>
        public string UIYourguessednumberistText1Name = "Your guessed number is too low!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickAllElements'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class ClickAllElementsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        
        /// <summary>
        /// Type '3000000' in 'guessedNumber' text box
        /// </summary>
        public string UIGuessedNumberEditText = "3000000";
        
        /// <summary>
        /// Maximize window 'MainWindow'
        /// </summary>
        public bool UIMainWindowWindow1Maximized = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckWinMessageDefault'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class CheckWinMessageDefaultParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        
        /// <summary>
        /// Type '42' in 'guessedNumber' text box
        /// </summary>
        public string UIGuessedNumberEditText = "42";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Your guess is correct! Click 'New Game' for the ne...' label equals 'Your guess is correct!
        ///Click 'New Game' for the next round.'
        /// </summary>
        public string UIYourguessiscorrectClTextName = "Your guess is correct!\nClick \'New Game\' for the next round.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckNewGameMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class CheckNewGameMessageParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        
        /// <summary>
        /// Launch 'E:\Studium\Technikum\SS2021\SWE2\Kompensiationsarbeit\NumberGuesser\NumberGuesser\bin\Debug\net5.0-windows\NumberGuesser.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "E:\\Studium\\Technikum\\SS2021\\SWE2\\Kompensiationsarbeit\\NumberGuesser\\NumberGuesser" +
            "\\bin\\Debug\\net5.0-windows\\NumberGuesser.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Make a guess to get new information!' label equals 'Make a guess to get new information!'
        /// </summary>
        public string UIMakeaguesstogetnewinTextName = "Make a guess to get new information!";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIGuessedNumberEdit
        {
            get
            {
                if ((this.mUIGuessedNumberEdit == null))
                {
                    this.mUIGuessedNumberEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIGuessedNumberEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "guessedNumber";
                    this.mUIGuessedNumberEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIGuessedNumberEdit;
            }
        }
        
        public WpfButton UIGuessButton
        {
            get
            {
                if ((this.mUIGuessButton == null))
                {
                    this.mUIGuessButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGuessButton.SearchProperties[WpfButton.PropertyNames.Name] = "Guess";
                    this.mUIGuessButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIGuessButton;
            }
        }
        
        public WpfText UIYourguessednumberistText
        {
            get
            {
                if ((this.mUIYourguessednumberistText == null))
                {
                    this.mUIYourguessednumberistText = new WpfText(this);
                    #region Search Criteria
                    this.mUIYourguessednumberistText.SearchProperties[WpfText.PropertyNames.Name] = "Your guessed number is too high!";
                    this.mUIYourguessednumberistText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIYourguessednumberistText;
            }
        }
        
        public WpfText UIYourguessednumberistText1
        {
            get
            {
                if ((this.mUIYourguessednumberistText1 == null))
                {
                    this.mUIYourguessednumberistText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIYourguessednumberistText1.SearchProperties[WpfText.PropertyNames.Name] = "Your guessed number is too low!";
                    this.mUIYourguessednumberistText1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIYourguessednumberistText1;
            }
        }
        
        public WpfButton UINewGameButton
        {
            get
            {
                if ((this.mUINewGameButton == null))
                {
                    this.mUINewGameButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUINewGameButton.SearchProperties[WpfButton.PropertyNames.Name] = "New Game";
                    this.mUINewGameButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUINewGameButton;
            }
        }
        
        public WpfText UIYourguessiscorrectClText
        {
            get
            {
                if ((this.mUIYourguessiscorrectClText == null))
                {
                    this.mUIYourguessiscorrectClText = new WpfText(this);
                    #region Search Criteria
                    this.mUIYourguessiscorrectClText.SearchProperties[WpfText.PropertyNames.Name] = "Your guess is correct!\nClick \'New Game\' for the next round.";
                    this.mUIYourguessiscorrectClText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIYourguessiscorrectClText;
            }
        }
        
        public WpfText UIMakeaguesstogetnewinText
        {
            get
            {
                if ((this.mUIMakeaguesstogetnewinText == null))
                {
                    this.mUIMakeaguesstogetnewinText = new WpfText(this);
                    #region Search Criteria
                    this.mUIMakeaguesstogetnewinText.SearchProperties[WpfText.PropertyNames.Name] = "Make a guess to get new information!";
                    this.mUIMakeaguesstogetnewinText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMakeaguesstogetnewinText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIGuessedNumberEdit;
        
        private WpfButton mUIGuessButton;
        
        private WpfText mUIYourguessednumberistText;
        
        private WpfText mUIYourguessednumberistText1;
        
        private WpfButton mUINewGameButton;
        
        private WpfText mUIYourguessiscorrectClText;
        
        private WpfText mUIMakeaguesstogetnewinText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.31306.167")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIMainWindowTitleBar.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIMainWindowTitleBar;
        
        private WinButton mUICloseButton;
        #endregion
    }
}
